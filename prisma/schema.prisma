generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String         @id @default(uuid())
  name            String
  email           String         @unique
  passwordHash    String
  role            Role           @default(USER)
  isDeveloper     Boolean        @default(false)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  purchases       UserPurchase[]
  uploadedWorkers AIWorker[]     @relation("UserUploads")
  jobs            Job[]
  reviews         Review[]
  orders          Order[]
  apiKeys         ApiKey[] 
}

model AIWorker {
  id              String         @id @default(uuid())
  name            String
  description     String
  tags            String[]
  inputSchema     Json?
  outputSchema    Json?
  pricePerRun     Float          @default(0.0)
  isPublic        Boolean        @default(false)
  filePath        String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  developerId     String
  developer       User           @relation("UserUploads", fields: [developerId], references: [id])
  jobs            Job[]
  reviews         Review[]
  status          WorkerStatus   @default(PENDING)
  rejectionReason String?
  purchases       UserPurchase[]
  orders          Order[]
  apiKeys         ApiKey[] 
}

model UserPurchase {
  id         String      @id @default(uuid())
  userId     String
  aiWorkerId String
  status     OrderStatus @default(PENDING)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  user     User     @relation(fields: [userId], references: [id])
  aiWorker AIWorker @relation(fields: [aiWorkerId], references: [id])

  @@unique([userId, aiWorkerId])
}

model Job {
  id         String    @id @default(uuid())
  input      Json
  output     Json?
  status     JobStatus @default(PENDING)
  startedAt  DateTime?
  finishedAt DateTime?
  userId     String
  aiWorkerId String
  aiWorker   AIWorker  @relation(fields: [aiWorkerId], references: [id])
  user       User      @relation(fields: [userId], references: [id])
}

model Review {
  id         String   @id @default(uuid())
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  userId     String
  aiWorkerId String
  aiWorker   AIWorker @relation(fields: [aiWorkerId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model Order {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  aiWorker   AIWorker @relation(fields: [aiWorkerId], references: [id])
  aiWorkerId String

  cycles      Int
  totalAmount Int // in INR (or paise if you're storing actual amount * 100)

  razorpayOrderId   String
  razorpayPaymentId String
  razorpaySignature String

  status OrderStatus @default(PENDING)

  invoiceFilename String? // e.g., invoice_order1234.pdf

  createdAt DateTime @default(now())
}

model ApiKey {
  id          String   @id @default(uuid())
  key         String   @unique
  userId      String
  aiWorkerId  String
  remainingRuns Int     @default(0) // how many runs left

  user        User     @relation(fields: [userId], references: [id])
  aiWorker    AIWorker @relation(fields: [aiWorkerId], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


enum Role {
  USER
  ADMIN
}

enum JobStatus {
  PENDING
  RUNNING
  SUCCESS
  FAILED
}

enum WorkerStatus {
  PENDING
  APPROVED
  REJECTED
}

enum OrderStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
}
